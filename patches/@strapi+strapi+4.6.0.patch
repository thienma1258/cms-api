diff --git a/node_modules/@strapi/strapi/ee/license.js b/node_modules/@strapi/strapi/ee/license.js
index e5a2807..60f6bc5 100644
--- a/node_modules/@strapi/strapi/ee/license.js
+++ b/node_modules/@strapi/strapi/ee/license.js
@@ -2,10 +2,10 @@
 
 const fs = require('fs');
 const { join } = require('path');
-const crypto = require('crypto');
-const fetch = require('node-fetch');
+// const crypto = require('crypto');
+// const fetch = require('node-fetch');
 
-const machineId = require('../lib/utils/machine-id');
+// const machineId = require('../lib/utils/machine-id');
 
 const DEFAULT_FEATURES = {
   bronze: [],
@@ -13,7 +13,7 @@ const DEFAULT_FEATURES = {
   gold: ['sso', { name: 'audit-logs', options: { retentionDays: 30 } }],
 };
 
-const publicKey = fs.readFileSync(join(__dirname, 'resources/key.pub'));
+// const publicKey = fs.readFileSync(join(__dirname, 'resources/key.pub'));
 
 class LicenseCheckError extends Error {
   constructor(message, shouldFallback = false) {
@@ -35,26 +35,26 @@ const readLicense = (directory) => {
 };
 
 const verifyLicense = (license) => {
-  const [signature, base64Content] = Buffer.from(license, 'base64').toString().split('\n');
+  // const [signature, base64Content] = Buffer.from(license, 'base64').toString().split('\n');
 
-  if (!signature || !base64Content) {
-    throw new Error('Invalid license.');
-  }
-
-  const stringifiedContent = Buffer.from(base64Content, 'base64').toString();
+  // if (!signature || !base64Content) {
+  //   throw new Error('Invalid license.');
+  // }
 
-  const verify = crypto.createVerify('RSA-SHA256');
-  verify.update(stringifiedContent);
-  verify.end();
+  // const stringifiedContent = Buffer.from(base64Content, 'base64').toString();
 
-  const verified = verify.verify(publicKey, signature, 'base64');
+  // const verify = crypto.createVerify('RSA-SHA256');
+  // verify.update(stringifiedContent);
+  // verify.end();
 
-  if (!verified) {
-    throw new Error('Invalid license.');
-  }
+  // const verified = verify.verify(publicKey, signature, 'base64');
 
-  const licenseInfo = JSON.parse(stringifiedContent);
+  // if (!verified) {
+  //   throw new Error('Invalid license.');
+  // }
 
+  // const licenseInfo = JSON.parse(stringifiedContent);
+  let licenseInfo={};
   if (!licenseInfo.features) {
     licenseInfo.features = DEFAULT_FEATURES[licenseInfo.type];
   }
@@ -68,30 +68,34 @@ const throwError = () => {
 };
 
 const fetchLicense = async (key, projectId) => {
-  const response = await fetch(`https://license.strapi.io/api/licenses/validate`, {
-    method: 'POST',
-    headers: { 'Content-Type': 'application/json' },
-    body: JSON.stringify({ key, projectId, deviceId: machineId() }),
-  }).catch(throwError);
-
-  const contentType = response.headers.get('Content-Type');
-
-  if (contentType.includes('application/json')) {
-    const { data, error } = await response.json();
-
-    switch (response.status) {
-      case 200:
-        return data.license;
-      case 400:
-        throw new LicenseCheckError(error.message);
-      case 404:
-        throw new LicenseCheckError('The license used does not exists.');
-      default:
-        throwError();
-    }
-  } else {
-    throwError();
+  // const response = await fetch(`https://license.strapi.io/api/licenses/validate`, {
+  //   method: 'POST',
+  //   headers: { 'Content-Type': 'application/json' },
+  //   body: JSON.stringify({ key, projectId, deviceId: machineId() }),
+  // }).catch(throwError);
+  // console.log(response);
+  return {
+    features:DEFAULT_FEATURES,
   }
+
+  // const contentType = response.headers.get('Content-Type');
+
+  // if (contentType.includes('application/json')) {
+  //   const { data, error } = await response.json();
+
+  //   switch (response.status) {
+  //     case 200:
+  //       return data.license;
+  //     case 400:
+  //       throw new LicenseCheckError(error.message);
+  //     case 404:
+  //       throw new LicenseCheckError('The license used does not exists.');
+  //     default:
+  //       throwError();
+  //   }
+  // } else {
+  //   throwError();
+  // }
 };
 
 module.exports = Object.freeze({
